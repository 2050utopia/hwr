#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Copyright (C) 2009 Mathieu Blondel
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

import gtk
from gtk import gdk

from tegakigtk.iconview import WritingIconView

PREDEFINED_SETS = {
"Digits" : [[48,57]],
"Letters" : [[97,122]],
"Hiragana" : [[0x3041, 0x3096]],
"Katakana" : [[0x30A1, 0x30F7]]
}

class AddCharacterSetDialog(gtk.Dialog):

    def __init__(self, parent):
        gtk.Dialog.__init__(self)
        self._init_dialog(parent)
        self._create_ui()

    def _init_dialog(self, parent):
        self.add_button(gtk.STOCK_CANCEL, gtk.RESPONSE_CANCEL)
        self.add_button(gtk.STOCK_OK, gtk.RESPONSE_OK)
        self.set_default_response(gtk.RESPONSE_OK)
        self.set_has_separator(True)
        self.set_transient_for(parent)
        self.set_border_width(6)
        self.set_modal(True)
        self.set_title("Add characters")

    def _create_ui(self):
        # Add from char
        self._char_vbox = gtk.VBox(spacing=5)
        self._char_radio = gtk.RadioButton(group=None, 
                                           label="Characters")
        self._char_entry = gtk.Entry()
        label = gtk.Label()
        label.set_alignment(0.0, 0.0)
        ex = "<i>Examples:\na\na, b, c\n0x65..0x70, 0x72</i>"
        label.set_markup(ex)
        self._char_vbox.pack_start(self._char_entry)
        self._char_vbox.pack_start(label)

        # Add from predefined set
        self._set_vbox = gtk.VBox(spacing=5)
        self._set_radio = gtk.RadioButton(group=self._char_radio, 
                                          label="Predefined set")
        self._create_set_combo()
        self._set_vbox.pack_start(self._set_combo)
        self._set_vbox.set_sensitive(False)

        # Add from file
        self._file_vbox = gtk.VBox(spacing=5)
        self._file_radio = gtk.RadioButton(group=self._char_radio, 
                                           label="From UTF8 file")
        self._file_button = gtk.FileChooserButton("Choose file")
        exp = "<i>All the characters found in this file will be added.</i>"
        label = gtk.Label()
        label.set_alignment(0.0, 0.0)
        label.set_markup(exp)

        self._file_vbox.pack_start(self._file_button)
        self._file_vbox.pack_start(label)
        self._file_vbox.set_sensitive(False)

        # Main vbox
        main_vbox = self.get_child()
        main_vbox.set_spacing(10)
        main_vbox.pack_start(self._char_radio)
        main_vbox.pack_start(self._char_vbox)
        main_vbox.pack_start(self._set_radio)
        main_vbox.pack_start(self._set_vbox)
        main_vbox.pack_start(self._file_radio)
        main_vbox.pack_start(self._file_vbox)

        self._char_radio.connect("toggled", self._on_toggle_option)
        self._set_radio.connect("toggled", self._on_toggle_option)
        self._file_radio.connect("toggled", self._on_toggle_option)

        self.show_all()

    def _on_toggle_option(self, widget):
        for radio, vbox in [[self._char_radio, self._char_vbox],
                            [self._set_radio, self._set_vbox],
                            [self._file_radio, self._file_vbox]]:
            vbox.set_sensitive(radio.get_active())

    def _create_set_combo(self):
        self._set_combo = gtk.ComboBox(gtk.ListStore(str))
        cell = gtk.CellRendererText()
        self._set_combo.pack_start(cell, True)
        self._set_combo.add_attribute(cell, 'text', 0)
        keys = PREDEFINED_SETS.keys()
        keys.sort()
        for k in keys:
            self._set_combo.append_text(k)
        self._set_combo.set_active(0)

    def get_charsets(self):
        if self._char_radio.get_active():
            return self._get_charsets_from_list()
        elif self._set_radio.get_active():
            return self._get_charsets_from_predefined_set()
        elif self._file_radio.get_active():
            return self._get_charsets_from_file()

    def _get_char_from_str(self, s):
        try:
            return self._get_utf8_from_int(self._get_int_from_str(s))
        except ValueError:
            return s

    def _get_int_from_str(self, s):
        if s.startswith("0x"):
            return int(s, 16)
        else:
            return int(s)

    def _get_utf8_from_int(self, i):
        return unichr(i).encode("utf-8")

    def _get_charsets_from_list(self):
        elements = self._char_entry.get_text().strip().split(",")
        chars = []
        for element in elements:
            element = element.strip()
            if ".." in element: # this is a range
                val = [s.strip() for s in element.split("..")]
                inf = self._get_int_from_str(val[0])
                sup = self._get_int_from_str(val[1])
                if sup < inf:
                    continue
                chars += [self._get_utf8_from_int(i) for i in range(inf, sup+1)]
            else: # this is an individual character
                chars.append(self._get_char_from_str(element))
        return chars

    def _get_charsets_from_predefined_set(self):
        keys = PREDEFINED_SETS.keys()
        keys.sort()
        k = keys[self._set_combo.get_active()]
        characters = []
        for val in PREDEFINED_SETS[k]:
            if isinstance(val, int):
                characters.append(self._get_utf8_from_int(val))
            elif isinstance(val, list):
                for code in range(val[0], val[1]+1):
                    characters.append(self._get_utf8_from_int(code))           
   
        return characters

    def _get_charsets_from_file(self):
        filename = self._file_button.get_filename()
        if not filename:
            return []
        f = open(filename)
        buf = f.read()
        f.close()
        try:
            unicodestr = unicode(buf, "utf-8")
        except UnicodeDecodeError:
            return []
        unicodestr = unicodestr.replace("\t", "")
        unicodestr = unicodestr.replace("\n", "")
        unicodestr = unicodestr.replace("\r", "")
        unicodestr = unicodestr.replace(" ", "")
        d = {}
        for char in unicodestr:
            d[char] = 1
        return d.keys()

class CharacterSetListView(gtk.TreeView):

    def __init__(self):
        self._model = gtk.ListStore(str)
        gtk.TreeView.__init__(self, self._model)
        self._column_name = gtk.TreeViewColumn("Character sets")
        cell = gtk.CellRendererText()
        self._column_name.pack_start(cell, expand=True)
        self._column_name.add_attribute(cell, 'text', 0)
        self._column_name.set_sort_column_id(0)
        self.set_search_column(0)
        self.set_headers_visible(False)
        self.set_reorderable(True)
        self.append_column(self._column_name)

    def append_character(self, character):
        if not self.includes_character(character):
            self._model.append((character,))

    def includes_character(self, character):
        for row in self._model:
            if row[0] == character:
                return True
        return False

class TegakiTrain(object):

    def __init__(self):
        self._create_window()

    def _on_new(self, widget):
        pass

    def _on_save(self, widget):
        pass

    def _on_save_as(self, widget):
        pass

    def _on_train(self, widget):
        pass

    def _on_quit(self, widget):
        gtk.main_quit()

    def _on_copy(self, widget):
        pass

    def _on_select_all(self, widget):
        pass

    def _on_toggle_statusbar(self, widget):
        pass

    def _on_toggle_toolbar(self, widget):
        pass

    def _on_add_charset(self, widget):
        dialog = AddCharacterSetDialog(self._window)
        dialog.connect("response", self._on_add_charset_validate)
        dialog.run()

    def _on_add_charset_validate(self, dialog, response):
        if response == gtk.RESPONSE_OK:
            for charset in dialog.get_charsets():
                self._treeview.append_character(charset)

        dialog.destroy()

    def _on_remove_charset(self, widget):
        seliter = self._treeview.get_selection().get_selected()[1]
        self._treeview.get_model().remove(seliter)

    def _on_charset_selection_changed(self, widget):
        if self._treeview.get_selection().count_selected_rows() >= 1:
            sensitive = True
        else:
            sensitive = False

        self._remove_charset_button.set_sensitive(sensitive)
        for s in ["AddSample", "AddSampleFromFile"]:
            self._global_actions.get_action(s).set_sensitive(sensitive)

    def _on_add_sample(self, widget):
        pass

    def _on_add_sample_from_file(self, widget):
        pass

    def _create_menu(self):
        self._uimanager = gtk.UIManager()
        menu_xml = \
"""
<ui>
    <menubar name="MainMenubar">
        <menu action="FileMenu">
            <menuitem action="New"/>
            <separator/>
            <menuitem action="Save"/>
            <menuitem action="SaveAs"/>
            <separator/>
            <menuitem action="Train"/>
            <separator/>
            <menuitem action="Quit"/>
        </menu>
        <menu action="EditMenu">
            <menuitem action="AddSample"/>
            <menuitem action="AddSampleFromFile"/>
            <separator/>
            <menuitem action="Copy"/>
            <menuitem action="SelectAll"/>
        </menu>
        <menu action="ViewMenu">
            <menuitem action="Statusbar"/>
            <menuitem action="Toolbar"/>
        </menu>
        <!-- <menu action="HelpMenu">
            <menuitem action="Help"/>
            <separator/>
            <menuitem action="About"/>
        </menu> -->
    </menubar>
</ui>
"""

        toolbar_xml = \
"""
<ui>
    <toolbar name="Toolbar">
            <toolitem action="New"/>
            <separator/>
            <toolitem action="Save"/>
            <toolitem action="SaveAs"/>
            <separator/>
            <toolitem action="Train"/>
            <separator/>
            <toolitem action="AddSample"/>
    </toolbar>
</ui>
"""

        # [(name, stock_id, label, accelerator, tooltip, proc), ... ]
        standard_actions = [
("FileMenu", None, "_File"),
("New", gtk.STOCK_NEW, None, None, None, self._on_new),
("Save", gtk.STOCK_SAVE, None, None, None, self._on_save),
("SaveAs", gtk.STOCK_SAVE_AS, None, None, None, self._on_save_as),
("Train", gtk.STOCK_EXECUTE, "_Train", None, None, self._on_train),
("Quit", gtk.STOCK_QUIT, None, None, None, self._on_quit),

("EditMenu", None, "_Edit"),
("AddSample", gtk.STOCK_ADD, "Add sample", None, None, self._on_add_sample),
("AddSampleFromFile", None, "Add sample from file", None, None, 
    self._on_add_sample_from_file),
("Copy", gtk.STOCK_COPY, None, None, None, self._on_copy),
("SelectAll", None, "Select _All", "<ctrl>A", None, self._on_select_all),

("ViewMenu", None, "_View"),
        ]

        toggle_actions = [
("Statusbar", None, "_Statusbar", None, None, self._on_toggle_statusbar, 1),
("Toolbar", None, "_Toolbar", None, None, self._on_toggle_toolbar, 1),
        ]

        self._global_actions = gtk.ActionGroup("Standard actions")
        self._global_actions.add_actions(standard_actions)
        self._global_actions.add_toggle_actions(toggle_actions)
        self._global_actions.get_action("AddSample").set_sensitive(False)
        self._global_actions.get_action("AddSampleFromFile"). \
            set_sensitive(False)

        self._uimanager.insert_action_group(self._global_actions, 0)
        self._uimanager.add_ui_from_string(menu_xml)
        self._uimanager.add_ui_from_string(toolbar_xml)
        
        self._menubar = self._uimanager.get_widget("/MainMenubar")
        self._toolbar = self._uimanager.get_widget("/Toolbar")
        self._toolbar.set_border_width(0)

    def _create_left_pane(self):
        self._leftvbox = gtk.VBox()

        frame = gtk.Frame()
        frame.set_shadow_type(gtk.SHADOW_ETCHED_IN)
        label = gtk.Label("Character sets")
        frame.add(label)
        self._leftvbox.pack_start(frame, expand=False)

        frame = gtk.Frame()
        frame.set_shadow_type(gtk.SHADOW_ETCHED_IN)
        scrolledwindow = gtk.ScrolledWindow()
        scrolledwindow.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
        self._treeview = CharacterSetListView()
        selection = self._treeview.get_selection()
        selection.connect("changed", self._on_charset_selection_changed)
        scrolledwindow.add(self._treeview)
        frame.add(scrolledwindow)
        self._leftvbox.pack_start(frame)

        hbox = gtk.HBox()
        self._add_charset_button = gtk.Button(stock=gtk.STOCK_ADD)
        self._add_charset_button.connect("clicked", self._on_add_charset)
        self._remove_charset_button = gtk.Button(stock=gtk.STOCK_REMOVE)
        self._remove_charset_button.connect("clicked", self._on_remove_charset)
        self._remove_charset_button.set_sensitive(False)
        hbox.pack_start(self._add_charset_button)
        hbox.pack_start(self._remove_charset_button)

        self._leftvbox.pack_start(hbox, expand=False)

    def _create_window(self):
        self._window = gtk.Window()

        self._create_menu()
        self._window.add_accel_group(self._uimanager.get_accel_group())

        main_vbox = gtk.VBox()
        main_vbox.pack_start(self._menubar, expand=False)
        main_vbox.pack_start(self._toolbar, expand=False)

        self._sidepane = gtk.HPaned()

        self._create_left_pane()
        self._sidepane.add1(self._leftvbox)

        frame = gtk.Frame()
        frame.set_shadow_type(gtk.SHADOW_ETCHED_IN)
        scrolledwindow = gtk.ScrolledWindow()
        scrolledwindow.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
        self._iconview = WritingIconView()
        scrolledwindow.add(self._iconview)
        frame.add(scrolledwindow)
        self._sidepane.add2(frame)

        main_vbox.pack_start(self._sidepane, padding=2)

        self._statusbar = gtk.Statusbar()
        main_vbox.pack_start(self._statusbar, expand=False, padding=2)

        self._window.add(main_vbox)
        self._window.set_default_size(600, 500)
        self._window.set_title("Tegaki Train")
        self._window.show_all()

    def run(self):
        gtk.main()

TegakiTrain().run()
